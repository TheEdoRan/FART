#!/usr/bin/env bash


##################################
#              INIT              #
##################################


TITLE="Fastest Arch Real Timesaver Installer"

# Colors
NC='\033[0m'
CYAN='\033[0;36m'
RED='\033[0;31m'

# Expand aliases in script.
shopt -s expand_aliases

# Setup pacman and paru aliases (install and AUR install).
alias ins='sudo pacman -S --needed --noconfirm'
alias ains='paru -S --needed --noconfirm --sudoloop'

# Init global variables.
INSTALL_MODULES=""
LOCALE_MODULES=""


###################################
#              UTILS              #
###################################


# Exit the script
exit_script () {
  clear && echo -e "${RED}Script terminated before finish.${NC}" && exit 1
}

# Check if user wants to exit before finish.
trap exit_script INT

# Sudo loop.
sudo -v

while true; do
  sudo -n true
  sleep 60
  kill -0 "$$" || exit
done 2>/dev/null &

# Check if dialog is installed on the system.
if [ ! -x "$(command -v dialog)" ]; then
  echo 'dialog not found. Proceeding to install it.'
  ins dialog
fi

# Dialog util.
dialog_box () {
  dialog --title "${TITLE}" "$@" 0 0
}

# $1: context.
dialog_modules () {
  case "$1" in
    "base")
      MODULES=("Base|on" "Flatpak|on" "Snap|off" "Xorg|on" "PipeWire|on" \
       "Intel|off" "AMD|off" "NVIDIA|off" "i3|off" "GNOME|off" "KDE_Plasma|off" \
       "XFCE|off" "Fonts|on" "Printing|on" "UFW|off" "DNSCrypt|off" "Fish|off" \
       "Tmux|off" "Neovim|on" "VS_Code|off" "Thunderbird|off" "Chromium|off" \
       "Firefox|on" "Brave|off" "Materia_Theme|off" "Papirus_Icons|on" "QEMU|off"\
       "VirtualBox|off" "Authy|off" "Bitwarden|off" "Telegram|off" "Discord|off"\
       "Krita|off" "GIMP|off" "Inkscape|off" "Kdenlive|off" "Audacity|off" "Rhythmbox|off" \
       "LibreOffice|on")
      ;;
    "laptop")
      MODULES=("NVIDIA_Prime|off" "TLP|on" "Touchegg|on")
      ;;
  esac

  # Array containing arguments for dialog checklist.
  local ARGS=()

  for m in "${MODULES[@]}"; do
    # Get module name.
    local module=$(echo "$m" | sed -E 's/\|.*$//')

    # Get status (on|off).
    local status=$(echo "$m" | sed -E 's/^.*\|//')

    ARGS+=("$module" "" "$status")
  done

  # Build checklist and store results in variable.
  exec 3>&1

  INSTALL_MODULES+=" $(dialog --checklist 'Select packages to install:' \
                      0 0 0 "${ARGS[@]}" 2>&1 1>&3)"

  # If exit code of checklist isn't 0, exit the script.
  [ "$?" != 0 ] && exit_script

  exec 3>&-
}

# $1: package name
# $2: select options array.
dialog_locale () {
  # Get pkg name.
  local NAME=$1

  # Shift first element of params.
  shift

  # Array containing options for dialog radiolist.
  local ARGS=()

  for m in "$@"; do
    ARGS+=("$m" "" off)
  done

  exec 3>&1

  # Build radiolist and store results in variable.
  LOCALE_MODULES+=" $(dialog --radiolist "Select locale package for ${NAME}:" \
    0 0 0 "${ARGS[@]}" 2>&1 1>&3)"

  # If exit code of checklist isn't 0, exit the script.
  [ "$?" != 0 ] && exit_script

  exec 3>&-
}


###################################
#           PRE-INSTALL           #
###################################


# Welcome box.
dialog_box --msgbox "\nWelcome to FART, the one and only Fastest Arch Real \
Timesaver installer.\n\nIn the next steps, you'll need to select which packages \
you want to install for your system."

# Show checklist for base modules.
dialog_modules "base"

# Check if the computer is a laptop.
if [ "$(hostnamectl | grep 'Chassis' | sed 's/.*:\s//')" == "laptop" ]; then
  dialog_box --yesno "\nA laptop was detected. Do you want to install laptop \
specific packages?"

  # Check output for previous command, display package list accordingly.
  [ "$?" == 0 ] && dialog_modules "laptop"
fi


# Convert install packages to lowercase, to match name of functions.
INSTALL_MODULES=$(awk '{print tolower($0)}' <<< "${INSTALL_MODULES}")

# LOCALE SPECIFIC PACKAGES

# Check if Firefox is in modules to install.
if [[ "${INSTALL_MODULES}" == *"firefox"* ]]; then
  # Search locale packages for Firefox.
  IFS=$'\n' read -rd '' -a LOCALES <<< $(pacman -Ssq firefox-i18n-)

  dialog_locale "Firefox" "${LOCALES[@]}"
fi

# Check if Thunderbird is in modules to install.
if [[ "${INSTALL_MODULES}" == *"thunderbird"* ]]; then
  # Search locale packages for Thunderbird.
  IFS=$'\n' read -rd '' -a LOCALES <<< $(pacman -Ssq thunderbird-i18n-)

  dialog_locale "Thunderbird" "${LOCALES[@]}"
fi

# Check if LibreOffice is in modules to install.
if [[ "${INSTALL_MODULES[@]}" =~ "libreoffice" ]]; then
  # Search locale packages for LibreOffice.
  IFS=$'\n' read -rd '' -a LOCALES <<< $(pacman -Ssq libreoffice-fresh-)

  dialog_locale "LibreOffice" "${LOCALES[@]}"
fi

# Clear the screen in preparation to installation.
clear

# If no packages selected, exit the script.
[ -z "${INSTALL_MODULES}" ] && echo "Nothing to do. Bye bye." && exit 0

# Ensure keyring is updated.
sudo pacman -Syy archlinux-keyring --noconfirm

# Run upgrade, just in case.
sudo pacman -Syu --noconfirm


###################################
#             MODULES             #
###################################


########## BASE ##########


base () {
  ins bash-completion pacman-contrib autorandr xsettingsd htop libinput \
      xdg-utils xdg-user-dirs alsa alsa-utils accountsservice ntfs-3g \
      libdbusmenu-gtk2 libdbusmenu-gtk3 libdbusmenu-qt5 libcanberra \
      libcanberra-gstreamer libcanberra-pulse samba p7zip unrar \
      unzip zip gstreamer gst-{libav,plugins-{bad,base,good,ugly}} \
      gstreamer-vaapi neofetch lame twolame flac wavpack celt a52dec libdca \
      libmad libmpcdec opencore-amr speex libvorbis faac faad2 libfdk-aac \
      fdkaac jasper libwebp aom dav1d schroedinger libdv x265 libde265 x264 \
      libmpeg2 xvidcore libtheora libvpx git wget curl playerctl youtube-dl \
      gnome-disk-utility trash-cli transmission-gtk rsync ripgrep fzf cronie \
      exa imagemagick lm_sensors pkgfile python-pip

  # Sync clock.
  sudo hwclock --systohc
  sudo timedatectl set-ntp true
}

flatpak () {
  ins flatpak
}

snap () {
  ains snapd
  sudo systemctl enable apparmor.service
  sudo systemctl enable snapd.apparmor.service
  sudo systemctl enable snapd.socket
}

xorg () {
  ins xorg xorg-xinit xorg-xrandr xorg-xset xclip xdotool wmctrl
}

pipewire () {
  ins pipewire pipewire-alsa pipewire-pulse
}

intel () {
  ins intel-media-driver vulkan-intel
}

amd () {
  ins mesa libva-mesa-driver mesa-vdpau vulkan-radeon
}

nvidia () {
  ins nvidia nvidia-utils nvidia-settings
}

i3 () {
  ins i3-gaps i3blocks i3status xorg-xrdb python-i3ipc picom arandr \
      feh eog mpv brightnessctl redshift pcmanfm flameshot lightdm acpi \
      lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker pavucontrol \
      pamixer lxappearance-gtk3 qt5ct kvantum-qt5 lxqt-policykit \
      gnome-keyring network-manager-applet xdo inotify-tools \
      xarchiver alacritty xsettingsd rofi gvfs

  ains dunst-git autotiling menu-calc

  # Create user folders
  xdg-user-dirs-update

  sudo systemctl enable lightdm
}

gnome () {
  ins gnome gnome-tweaks dconf-editor chrome-gnome-shell flameshot qt5ct kvantum-qt5 \
      flameshot

  sudo systemctl enable gdm
}

kde_plasma () {
  ins sddm plasma powerdevil konsole kate kcalc kio kio-extras kio-gdrive ark \
    dolphin dolphin-plugins gwenview kamoso kdeconnect okular flameshot \
    breeze breeze-gtk breeze-icons

  sudo systemctl enable sddm
}

xfce () {
  ins xfce4 xfce4-goodies mousepad flameshot qt5ct kvantum-qt5 \
    lightdm lightdm-gtk-greeter albert network-manager-applet

  sudo systemctl enable lightdm
}

fonts () {
  ins ttf-opensans ttf-bitstream-vera ttf-croscore ttf-font-awesome ttf-hack \
      ttf-liberation ttf-ubuntu-font-family cantarell-fonts noto-fonts \
      noto-fonts-cjk noto-fonts-emoji

  ains nerd-fonts-hack ttf-ms-win10-auto

  sudo fc-cache -f
}

printing () {
  ins cups cups-filters cups-pdf ghostscript gsfonts foomatic-db-engine \
      foomatic-db-ppds foomatic-db-nonfree-ppds gutenprint \
      foomatic-db-gutenprint-ppds

  ains epson-inkjet-printer-escpr epson-inkjet-printer-escpr2

  sudo systemctl enable cups
}

ufw () {
  ins ufw

  sudo systemctl enable ufw
}

dnscrypt () {
  ins dnscrypt-proxy

  sudo systemctl enable dnscrypt-proxy
}

fish () {
  ins fish
}

tmux () {
  ins tmux
}

neovim () {
  ains neovim-nightly-bin
}

vs_code () {
  ins code
  ains code-marketplace
}

thunderbird () {
  ins thunderbird
}

brave () {
  ains brave-bin
}

firefox () {
  ins firefox
}

chromium () {
  ins chromium
  ains chromium-widevine
}

materia_theme () {
  ins materia-gtk-theme kvantum-theme-materia
}

papirus_icons () {
  ins papirus-icon-theme
}

qemu () {
  ins libvirt qemu qemu-arch-extra qemu-block-gluster qemu-block-iscsi \
      qemu-block-rbd ovmf virt-manager dnsmasq ebtables dmidecode

  sudo systemctl enable libvirtd
  sudo gpasswd -a $USER libvirt
}

virtualbox () {
  ins virtualbox virtualbox-guest-iso virtualbox-host-dkms
}

authy () {
  ains authy
}

bitwarden () {
  ains bitwarden-bin
}

telegram () {
  ins telegram-desktop
}

discord () {
  ins discord
}

krita () {
  ins krita
}

gimp () {
  ins gimp
}

inkscape () {
  ins inkscape
}

kdenlive () {
  ins kdenlive ffmpeg opencv
}

audacity () {
  ins audacity
}

rhythmbox () {
  ins rhythmbox
}

libreoffice () {
  ins libreoffice-fresh
}


########## LAPTOP ##########


nvidia_prime () {
  ins nvidia-prime
}

tlp () {
  ins tlp

  sudo systemctl enable tlp
  sudo tlp start
}

touchegg () {
  ains touchegg touche
}

libinput_gestures () {
  ains libinput-gestures

  # Add user to INPUT group.
  sudo gpasswd -a $USER input
}


###################################
#             INSTALL             #
###################################


# Starting the installation.
echo -e "Starting ${CYAN}Arch Linux${NC} post-installation!"

sleep 2

# If paru is not found on the system, install it.
[ ! -x "$(command -v paru)" ] \
  && ins git && git clone https://aur.archlinux.org/paru.git && cd paru/ \
  && makepkg -si --noconfirm && cd .. && rm -rf paru/

# Convert to array.
INSTALL_MODULES=($INSTALL_MODULES)

# Proceed to install user selected packages.
for module in "${INSTALL_MODULES[@]}"; do
  eval "$module"
done

# Proceed to install locale packages.
ins $(echo "$LOCALE_MODULES" | xargs)

# Finished installing.
echo -e "\nFinished ${CYAN}Arch Linux${NC} post-installation!"

sleep 2

# Ask for reboot.
dialog_box --yesno "Installation completed!\n\nDo you want to reboot the machine now?"

# If user chose to not reboot the machine.
if [ "$?" == 1 ]; then
  clear
else
  sudo reboot -f
fi
